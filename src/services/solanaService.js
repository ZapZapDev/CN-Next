import {
    Connection,
    PublicKey,
    Transaction,
    SystemProgram,
    LAMPORTS_PER_SOL
} from '@solana/web3.js';
import {
    createTransferInstruction,
    getAssociatedTokenAddress,
    createAssociatedTokenAccountInstruction
} from '@solana/spl-token';
import { config } from '../config/index.js';

class SolanaService {
    constructor() {
        this.connection = new Connection(config.solana.rpcUrl, config.solana.commitment);
        this.usdcMint = new PublicKey(config.tokens.USDC.mint);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º + –∫–æ–º–∏—Å—Å–∏–µ–π
     */
    async createDualTransaction(payerAddress, recipientAddress, amount, token) {
        try {
            console.log(`üîß Creating ${token} transaction with fee...`);

            const payer = new PublicKey(payerAddress);
            const recipient = new PublicKey(recipientAddress);
            const feeWallet = new PublicKey(config.fees.wallet);

            const transaction = new Transaction();

            // 1. –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞—Ç–µ–∂
            await this._addMainPayment(transaction, payer, recipient, amount, token);

            // 2. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é (–≤—Å–µ–≥–¥–∞ USDC)
            await this._addFeePayment(transaction, payer, feeWallet);

            // 3. –ü–æ–ª—É—á–∞–µ–º recent blockhash
            const { blockhash } = await this.connection.getLatestBlockhash();
            transaction.recentBlockhash = blockhash;
            transaction.feePayer = payer;

            console.log(`‚úÖ Transaction created with ${transaction.instructions.length} instructions`);
            return transaction;

        } catch (error) {
            console.error('‚ùå Error creating transaction:', error);
            throw error;
        }
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞—Ç–µ–∂ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
     */
    async _addMainPayment(transaction, payer, recipient, amount, token) {
        if (token === 'SOL') {
            // SOL –ø–µ—Ä–µ–≤–æ–¥
            const lamports = Math.floor(amount * LAMPORTS_PER_SOL);
            transaction.add(
                SystemProgram.transfer({
                    fromPubkey: payer,
                    toPubkey: recipient,
                    lamports
                })
            );
            console.log(`üí∞ Added SOL transfer: ${amount} SOL`);

        } else {
            // SPL Token –ø–µ—Ä–µ–≤–æ–¥
            const tokenConfig = config.tokens[token];
            if (!tokenConfig) {
                throw new Error(`Unsupported token: ${token}`);
            }

            const mint = new PublicKey(tokenConfig.mint);
            const tokenAmount = Math.floor(amount * Math.pow(10, tokenConfig.decimals));

            const payerTokenAccount = await getAssociatedTokenAddress(mint, payer);
            const recipientTokenAccount = await getAssociatedTokenAddress(mint, recipient);

            // –°–æ–∑–¥–∞–µ–º ATA –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await this._ensureTokenAccount(transaction, payer, recipient, mint, recipientTokenAccount);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤
            transaction.add(
                createTransferInstruction(
                    payerTokenAccount,
                    recipientTokenAccount,
                    payer,
                    tokenAmount
                )
            );
            console.log(`üí∞ Added ${token} transfer: ${amount} ${token}`);
        }
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
     */
    async _addFeePayment(transaction, payer, feeWallet) {
        const feeAmount = Math.floor(config.fees.amount * Math.pow(10, config.tokens.USDC.decimals));

        const payerUsdcAccount = await getAssociatedTokenAddress(this.usdcMint, payer);
        const feeUsdcAccount = await getAssociatedTokenAddress(this.usdcMint, feeWallet);

        // –°–æ–∑–¥–∞–µ–º ATA –¥–ª—è fee –∫–æ—à–µ–ª—å–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await this._ensureTokenAccount(transaction, payer, feeWallet, this.usdcMint, feeUsdcAccount);

        // –î–æ–±–∞–≤–ª—è–µ–º fee –ø–µ—Ä–µ–≤–æ–¥
        transaction.add(
            createTransferInstruction(
                payerUsdcAccount,
                feeUsdcAccount,
                payer,
                feeAmount
            )
        );
        console.log(`üí≥ Added fee transfer: ${config.fees.amount} USDC`);
    }

    /**
     * –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     */
    async _ensureTokenAccount(transaction, payer, owner, mint, tokenAccount) {
        try {
            const accountInfo = await this.connection.getAccountInfo(tokenAccount);
            if (!accountInfo) {
                // –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º
                transaction.add(
                    createAssociatedTokenAccountInstruction(
                        payer,
                        tokenAccount,
                        owner,
                        mint
                    )
                );
                console.log(`üîß Added ATA creation for ${owner.toBase58()}`);
            }
        } catch (error) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è
            transaction.add(
                createAssociatedTokenAccountInstruction(
                    payer,
                    tokenAccount,
                    owner,
                    mint
                )
            );
            console.log(`üîß Added ATA creation (fallback) for ${owner.toBase58()}`);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å Solana –∞–¥—Ä–µ—Å
     */
    validateAddress(address) {
        try {
            new PublicKey(address);
            return true;
        } catch {
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω
     */
    isTokenSupported(token) {
        return token in config.tokens;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
     */
    getTokenInfo(token) {
        return config.tokens[token] || null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
     */
    getSupportedTokens() {
        return Object.keys(config.tokens);
    }
}

export default new SolanaService();